//
// automatically generated by spin2cpp v1.05 on Sat Apr 12 16:11:58 2014
// ./spin2cpp screen.spin 
//

#include <propeller.h>
#include "simpletools.h"
#include "screen.h"

#ifdef __GNUC__
#define INLINE__ static inline
#define PostEffect__(X, Y) __extension__({ int32_t tmp__ = (X); (X) = (Y); tmp__; })
#else
#define INLINE__ static
static int32_t tmp__;
#define PostEffect__(X, Y) (tmp__ = (X), (X) = (Y), tmp__)
#endif

void screenSpin()
{
  
}

int32_t screenSpin::Init(void)
{
  serial.Init(8,6,9600);
  return 0;
}

int32_t screenSpin::Showvideo(void)
{
  Mediainit();
  serial.Tx(255);
  serial.Tx(187);
  serial.Tx(0);
  serial.Tx(0);
  serial.Tx(0);
  serial.Tx(0);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Mediainit(void)
{
  serial.Tx(255);
  serial.Tx(177);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Print(char* Data)
{
  serial.Tx(0);
  serial.Tx(6);
  for(int i=0;i<strlen(Data);i++)
  {
    serial.Tx((int)Data[i]);
  }
  serial.Tx(0);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::PrintInt(int Data)
{
  serial.Tx(0);
  serial.Tx(6);
//  for(int i=0;i<strlen(Data);i++)
  //{
    serial.Tx(Data);
  //}
  serial.Tx(0);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Fadeout(void)
{
  int32_t	Contrastnum;
  Contrastnum = 15;
  while (Contrastnum > (-1)) {
    Contrast(Contrastnum);
    Contrastnum = (Contrastnum - 1);
    waitcnt(((CLKFREQ / 8000) + CNT));
  }
  return 0;
}

int32_t screenSpin::Fadein(void)
{
  int32_t	Contrastnum;
  Contrastnum = 0;
  while (Contrastnum < 16) {
    Contrast(Contrastnum);
    Contrastnum = (Contrastnum + 1);
    waitcnt(((CLKFREQ / 8000) + CNT));
  }
  return 0;
}

int32_t screenSpin::Off(void)
{
  Contrast(0);
  return 0;
}

int32_t screenSpin::On(void)
{
  Contrast(15);
  return 0;
}

int32_t screenSpin::Contrast(int32_t Num)
{
  serial.Tx(255);
  serial.Tx(102);
  serial.Tx(0);
  serial.Tx(Num);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Clear(void)
{
  serial.Tx(0xFF);
  serial.Tx(0xD7);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Fontsize(int32_t Size)
{
  if ((Size < 1) || (Size > 16)) {
    Size = 1;
  }
  serial.Tx(255);
  serial.Tx(123);
  serial.Tx(0);
  serial.Tx(Size);
  Waitforcomplete();
  serial.Tx(255);
  serial.Tx(124);
  serial.Tx(0);
  serial.Tx(Size);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Position(int32_t Line, int32_t Col)
{
  serial.Tx(255);
  serial.Tx(228);
  serial.Tx(0);
  serial.Tx(Line);
  serial.Tx(0);
  serial.Tx(Col);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Txtcolor(int32_t Hexpart1, int32_t Hexpart2)
{
  serial.Tx(255);
  serial.Tx(127);
  serial.Tx(Hexpart1);
  serial.Tx(Hexpart2);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Showframe(int32_t Framenum)
{
  serial.Tx(255);
  serial.Tx(186);
  serial.Tx(0);
  serial.Tx(0);
  serial.Tx(0);
  serial.Tx(0);
  serial.Tx(0);
  serial.Tx(Framenum);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Txttrans(int32_t Bool)
{
  serial.Tx(255);
  serial.Tx(119);
  serial.Tx(0);
  serial.Tx(Bool);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Displayimage(void)
{
  Mediainit();
  serial.Tx(255);
  serial.Tx(179);
  serial.Tx(0);
  serial.Tx(0);
  serial.Tx(0);
  serial.Tx(0);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Drawrec(int32_t X1, int32_t Y1, int32_t X2, int32_t Y2, int32_t Colorhex1, int32_t Colorhex2)
{
  serial.Tx(255);
  serial.Tx(207);
  serial.Tx(0);
  serial.Tx(X1);
  serial.Tx(0);
  serial.Tx(Y1);
  serial.Tx(0);
  serial.Tx(X2);
  serial.Tx(0);
  serial.Tx(Y2);
  serial.Tx(Colorhex1);
  serial.Tx(Colorhex2);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Changecolor(int32_t Oldcolor1, int32_t Oldcolor2, int32_t Newcolor1, int32_t Newcolor2)
{
  serial.Tx(255);
  serial.Tx(190);
  serial.Tx(Oldcolor1);
  serial.Tx(Oldcolor2);
  serial.Tx(Newcolor1);
  serial.Tx(Newcolor2);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Setbyteaddr(int High1, int High2, int Low1, int Low2)
{
  serial.Tx(255);
  serial.Tx(185);
  serial.Tx(High1);
  serial.Tx(High2);
  serial.Tx(Low1);
  serial.Tx(Low2);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Setsectoraddr(int32_t High1, int32_t High2, int32_t Low1, int32_t Low2)
{
  serial.Tx(255);
  serial.Tx(184);
  serial.Tx(High1);
  serial.Tx(High2);
  serial.Tx(Low1);
  serial.Tx(Low2);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Txtbackcolor(int32_t Hex1, int32_t Hex2)
{
  serial.Tx(255);
  serial.Tx(126);
  serial.Tx(Hex1);
  serial.Tx(Hex2);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::Drawtri(int32_t X1, int32_t Y1, int32_t X2, int32_t Y2, int32_t X3, int32_t Y3, int32_t Color1, int32_t Color2)
{
  serial.Tx(255);
  serial.Tx(201);
  serial.Tx(0);
  serial.Tx(X1);
  serial.Tx(0);
  serial.Tx(Y1);
  serial.Tx(0);
  serial.Tx(X2);
  serial.Tx(0);
  serial.Tx(Y2);
  serial.Tx(0);
  serial.Tx(X3);
  serial.Tx(0);
  serial.Tx(Y3);
  serial.Tx(Color1);
  serial.Tx(Color2);
  Waitforcomplete();
  return 0;
}

int32_t screenSpin::SetsectorScores(void)
{
  Setbyteaddr(0 ,0 ,158 ,0);
  return 0;
}

int32_t screenSpin::Setsectorgpsmap(void)
{
  return 0;
}

int32_t screenSpin::Setsectorcal0(void)
{
  return 0;
}

int32_t screenSpin::Setsectorcal1(void)
{
  return 0;
}

int32_t screenSpin::Setsectorcal2(void)
{
  return 0;
}

int32_t screenSpin::Setsectorcal3(void)
{
  return 0;
}

int32_t screenSpin::Setsectorcal4(void)
{
  return 0;
}

int32_t screenSpin::Savestr(char* Data)
{
  for(int i=0;i<strlen(Data);i++)
  {
    Writebyte((int)Data[i]);
  }
}

int32_t screenSpin::Flush(void)
{
  serial.Tx(255);
  serial.Tx(178);
  Waitforcomplete();
  Waitforcomplete();
  Waitforcomplete();
  return 0;
}

/*
char* screenSpin::Readbyteasstring(void)
{
  serial.Tx(Serial,255);
  serial.Tx(Serial,183);
  int retVal=serial_rxChar(Serial);
  if (retVal == 6) {
    serial_rxChar(Serial);
//    return Sn.Hex(serial_rxChar(Serial), 2);
  } else {
    return "IO Error";
  }
}
*/
int screenSpin::Readbyte(void)
{

  serial.Tx(0xFF);
  serial.Tx(0xB7);
  int retVal=serial.Rx();
  if (retVal == 6) {
   // if(fdserial_rxChar(Serial)!=0x00){return "read error";}
    serial.Rx();
 
   // return readStr(Serial,text,10);
     int test=  serial.Rx();
    if(test==76)
  {
    high(18);
  }
return test;
    //return &retVal;
  } else {
    return -1;
  }
}

int32_t screenSpin::Writebyte(int32_t Char)
{
  int32_t	Retval1, Retval2, Retval3;
  if (Char != 0) {
    serial.Tx(0xFF);
    serial.Tx(0xB5);
    serial.Tx(0x00);
    serial.Tx(Char);
    Retval1 = Waitforcomplete();
    Retval2 = Waitforcomplete();
    Retval3 = Waitforcomplete();
  } else {
    Print("nulled out");
  }
  return 0;
}

int32_t screenSpin::Waitforcomplete(void)
{
 char test= serial.Rx();
  if((int)test == 6)
  {
   //high(16);
  }else{
   //low(16);
  }

}

void screenSpin::Close()
{
  serial.Finalize();
}